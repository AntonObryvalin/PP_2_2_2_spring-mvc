Общее описание проекта (Проект 2.2)
Проект 2.2 — это веб-приложение на основе Spring MVC с использованием шаблонизатора Thymeleaf для рендеринга страниц.
Приложение разрабатывается с использованием Java 17 и управляется с помощью системы сборки Maven.
Приложение демонстрирует базовую структуру MVC, где контроллер обрабатывает запросы от пользователей,
а представления (HTML-страницы) формируются с помощью Thymeleaf.


Основные компоненты проекта:
Spring MVC: Основной фреймворк для обработки HTTP-запросов и маршрутизации на основе аннотаций.

Приложение использует контроллеры для управления логикой и маршрутизацией.
Thymeleaf: Шаблонизатор для динамического создания HTML-страниц. Это позволяет рендерить данные на стороне сервера,
такие как приветственные сообщения, и отображать их на веб-страницах.
Maven: Управление зависимостями и процессом сборки проекта. Maven автоматически подключает библиотеки, такие как Spring MVC и Thymeleaf.
Java 17: Приложение написано с использованием возможностей Java 17 для обеспечения производительности и совместимости с современными стандартами.


Основные классы:
AppInit: Этот класс инициализирует Spring-приложение и настраивает диспетчер сервлета.
Он указывает на классы конфигурации и базовый URL для обработки запросов.

WebConfig: Класс конфигурации Spring MVC, который настраивает Thymeleaf как механизм отображения, а также сканирует компоненты в проекте.

HelloController: Контроллер, отвечающий за обработку GET-запросов на корневом URL ("/").
Он добавляет сообщения в модель и возвращает их для отображения на главной странице.

index.html: HTML-шаблон, который отображает сообщения, полученные от контроллера, используя Thymeleaf.


Зависимости:
Проект использует следующие библиотеки:
Spring Web MVC для построения REST-контроллеров и маршрутизации.
Thymeleaf для создания динамических HTML-страниц.
Java Servlet API для поддержки работы с сервлетами.
Приложение построено с учетом современных практик Spring Framework, где основная конфигурация и маршрутизация выполняются
через аннотации и Java-классы, что уменьшает необходимость в использовании XML-конфигураций.